import { MigrationInterface, QueryRunner } from "typeorm";

export class AddedComplaintView1715266274594 implements MigrationInterface {
    name = 'AddedComplaintView1715266274594'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE VIEW "complaint_view" AS SELECT ("event"."body" ->> 'complaint_id')::uuid AS "complaint_id", ("event"."body" ->> 'order_id')::uuid AS "order_id", ("event"."body" ->> 'user_id')::uuid AS "user_id", ("event"."body" ->> 'decision')::jsonb AS "decision", "event"."created_at" AS "created_at" FROM (SELECT ("inner_event"."body" ->> 'complaint_id')::uuid AS "complaint_id", jsonb_recursive_mergeagg("inner_event"."body") AS "body", MIN("inner_event"."created_at") AS "created_at" FROM "events" "inner_event" WHERE ("inner_event"."type" IN ('complaint:created','complaint:decision:refunded','complaint:decision:rejected','complaint:decision:released')) GROUP BY "inner_event"."body" ->> 'complaint_id') "event"`);
        await queryRunner.query(`INSERT INTO "typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["public","VIEW","complaint_view","SELECT (\"event\".\"body\" ->> 'complaint_id')::uuid AS \"complaint_id\", (\"event\".\"body\" ->> 'order_id')::uuid AS \"order_id\", (\"event\".\"body\" ->> 'user_id')::uuid AS \"user_id\", (\"event\".\"body\" ->> 'decision')::jsonb AS \"decision\", \"event\".\"created_at\" AS \"created_at\" FROM (SELECT (\"inner_event\".\"body\" ->> 'complaint_id')::uuid AS \"complaint_id\", jsonb_recursive_mergeagg(\"inner_event\".\"body\") AS \"body\", MIN(\"inner_event\".\"created_at\") AS \"created_at\" FROM \"events\" \"inner_event\" WHERE (\"inner_event\".\"type\" IN ('complaint:created','complaint:decision:refunded','complaint:decision:rejected','complaint:decision:released')) GROUP BY \"inner_event\".\"body\" ->> 'complaint_id') \"event\""]);
        await queryRunner.query(`CREATE VIEW "complaint_message_view" AS SELECT ("event"."body" ->> 'complaint_message_id')::uuid AS "complaint_message_id", ("event"."body" ->> 'complaint_id')::uuid AS "complaint_id", ("event"."body" ->> 'user_id')::uuid AS "user_id", ("event"."body" ->> 'sent_at')::timestamp AS "sent_at", ("event"."body" ->> 'body') AS "body", "event"."created_at" AS "created_at" FROM (SELECT ("inner_event"."body" ->> 'complaint_message_id')::uuid AS "complaint_message_id", jsonb_recursive_mergeagg("inner_event"."body") AS "body", MIN("inner_event"."created_at") AS "created_at" FROM "events" "inner_event" WHERE ("inner_event"."type" IN ('complaint:message:created')) GROUP BY "inner_event"."body" ->> 'complaint_message_id') "event"`);
        await queryRunner.query(`INSERT INTO "typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["public","VIEW","complaint_message_view","SELECT (\"event\".\"body\" ->> 'complaint_message_id')::uuid AS \"complaint_message_id\", (\"event\".\"body\" ->> 'complaint_id')::uuid AS \"complaint_id\", (\"event\".\"body\" ->> 'user_id')::uuid AS \"user_id\", (\"event\".\"body\" ->> 'sent_at')::timestamp AS \"sent_at\", (\"event\".\"body\" ->> 'body') AS \"body\", \"event\".\"created_at\" AS \"created_at\" FROM (SELECT (\"inner_event\".\"body\" ->> 'complaint_message_id')::uuid AS \"complaint_message_id\", jsonb_recursive_mergeagg(\"inner_event\".\"body\") AS \"body\", MIN(\"inner_event\".\"created_at\") AS \"created_at\" FROM \"events\" \"inner_event\" WHERE (\"inner_event\".\"type\" IN ('complaint:message:created')) GROUP BY \"inner_event\".\"body\" ->> 'complaint_message_id') \"event\""]);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DELETE FROM "typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","complaint_message_view","public"]);
        await queryRunner.query(`DROP VIEW "complaint_message_view"`);
        await queryRunner.query(`DELETE FROM "typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","complaint_view","public"]);
        await queryRunner.query(`DROP VIEW "complaint_view"`);
    }

}
