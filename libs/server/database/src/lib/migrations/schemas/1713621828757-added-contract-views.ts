import { MigrationInterface, QueryRunner } from "typeorm";

export class AddedContractViews1713621828757 implements MigrationInterface {
    name = 'AddedContractViews1713621828757'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE VIEW "contract_deployment_view" AS SELECT ("event"."body" ->> 'contract_id')::uuid AS "contract_id", ("event"."body" ->> 'deployment')::jsonb ->> 'transaction_hash' AS "transaction_hash", ("event"."body" ->> 'deployment')::jsonb ->> 'error' AS "error_message", ("event"."body" ->> 'deployment')::jsonb ->> 'address' AS "address", "event"."created_at" AS "created_at" FROM (SELECT ("inner_event"."body" ->> 'transaction_hash')::uuid AS "transaction_hash", jsonb_recursive_mergeagg("inner_event"."body") AS "body", MIN("inner_event"."created_at") AS "created_at" FROM "events" "inner_event" WHERE ("inner_event"."type" IN ('contract:deployment:started','contract:deployment:failed','contract:deployment:completed')) GROUP BY "inner_event"."body" ->> 'transaction_hash') "event"`);
        await queryRunner.query(`INSERT INTO "typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["public","VIEW","contract_deployment_view","SELECT (\"event\".\"body\" ->> 'contract_id')::uuid AS \"contract_id\", (\"event\".\"body\" ->> 'deployment')::jsonb ->> 'transaction_hash' AS \"transaction_hash\", (\"event\".\"body\" ->> 'deployment')::jsonb ->> 'error' AS \"error_message\", (\"event\".\"body\" ->> 'deployment')::jsonb ->> 'address' AS \"address\", \"event\".\"created_at\" AS \"created_at\" FROM (SELECT (\"inner_event\".\"body\" ->> 'transaction_hash')::uuid AS \"transaction_hash\", jsonb_recursive_mergeagg(\"inner_event\".\"body\") AS \"body\", MIN(\"inner_event\".\"created_at\") AS \"created_at\" FROM \"events\" \"inner_event\" WHERE (\"inner_event\".\"type\" IN ('contract:deployment:started','contract:deployment:failed','contract:deployment:completed')) GROUP BY \"inner_event\".\"body\" ->> 'transaction_hash') \"event\""]);
        await queryRunner.query(`CREATE VIEW "contract_view" AS SELECT ("event"."body" ->> 'contract_id')::uuid AS "contract_id", "contract_deployment"."address" AS "contract_address", "contract_deployment"."transaction_hash" AS "deployment_transaction_hash", "contract_deployment"."created_at" AS "deployed_at" FROM (SELECT ("inner_event"."body" ->> 'contract_id')::uuid AS "contract_id", jsonb_recursive_mergeagg("inner_event"."body") AS "body", MIN("inner_event"."created_at") AS "created_at" FROM "events" "inner_event" WHERE ("inner_event"."type" IN ('contract:created')) GROUP BY "inner_event"."body" ->> 'contract_id') "event" LEFT JOIN (SELECT * FROM "contract_deployment_view" "deployment" ORDER BY "deployment"."created_at" DESC LIMIT 1) "contract_deployment" ON "contract_deployment"."contract_id" = ("event"."body" ->> 'contract_id')::uuid`);
        await queryRunner.query(`INSERT INTO "typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["public","VIEW","contract_view","SELECT (\"event\".\"body\" ->> 'contract_id')::uuid AS \"contract_id\", \"contract_deployment\".\"address\" AS \"contract_address\", \"contract_deployment\".\"transaction_hash\" AS \"deployment_transaction_hash\", \"contract_deployment\".\"created_at\" AS \"deployed_at\" FROM (SELECT (\"inner_event\".\"body\" ->> 'contract_id')::uuid AS \"contract_id\", jsonb_recursive_mergeagg(\"inner_event\".\"body\") AS \"body\", MIN(\"inner_event\".\"created_at\") AS \"created_at\" FROM \"events\" \"inner_event\" WHERE (\"inner_event\".\"type\" IN ('contract:created')) GROUP BY \"inner_event\".\"body\" ->> 'contract_id') \"event\" LEFT JOIN (SELECT * FROM \"contract_deployment_view\" \"deployment\" ORDER BY \"deployment\".\"created_at\" DESC LIMIT 1) \"contract_deployment\" ON \"contract_deployment\".\"contract_id\" = (\"event\".\"body\" ->> 'contract_id')::uuid"]);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DELETE FROM "typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","contract_view","public"]);
        await queryRunner.query(`DROP VIEW "contract_view"`);
        await queryRunner.query(`DELETE FROM "typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","contract_deployment_view","public"]);
        await queryRunner.query(`DROP VIEW "contract_deployment_view"`);
    }

}
